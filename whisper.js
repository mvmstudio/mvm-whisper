#!/usr/bin/env node

// –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–æ–¥—É–ª—è—Ö
process.removeAllListeners('warning');
process.on('warning', (warning) => {
  if (warning.name !== 'DeprecationWarning') {
    console.warn(warning);
  }
});

import fs from "fs";
import path from "path";
import dotenv from "dotenv";
import { OpenAI } from "openai";
import cliProgress from "cli-progress";
import { program } from "commander";
import { fileTypeFromFile } from "file-type";

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∏–∑ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const envPaths = [
  path.join(process.cwd(), '.env'),
  path.join(process.env.HOME || process.env.USERPROFILE, '.env')
];

for (const envPath of envPaths) {
  if (fs.existsSync(envPath)) {
    dotenv.config({ path: envPath });
    break;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
const SCRIPT_DIR = path.dirname(new URL(import.meta.url).pathname);
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
const CHUNK_SIZE = 19 * 1024 * 1024; // 19MB (–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å)
const CHUNKS_DIR = path.join(SCRIPT_DIR, "chunks");
const RESULTS_DIR = path.join(SCRIPT_DIR, "result");

let openai; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞

// –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function createDirectories() {
  [CHUNKS_DIR, RESULTS_DIR].forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ —á–∞–Ω–∫–∏
async function splitFileIntoChunks(filePath) {
  const fileStats = fs.statSync(filePath);
  const totalSize = fileStats.size;
  const chunks = Math.ceil(totalSize / CHUNK_SIZE);
  
  console.log(`\nüì¶ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ —á–∞–Ω–∫–∏...`);
  const progressBar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);
  progressBar.start(chunks, 0);

  const fileType = await fileTypeFromFile(filePath);
  if (!fileType || !fileType.ext.match(/mp3|wav|m4a|mp4/)) {
    throw new Error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!");
  }

  const chunkFiles = [];
  const readStream = fs.createReadStream(filePath);
  let chunkNumber = 0;
  let currentChunk = Buffer.alloc(0);

  return new Promise((resolve, reject) => {
    readStream.on("data", (chunk) => {
      currentChunk = Buffer.concat([currentChunk, chunk]);
      
      while (currentChunk.length >= CHUNK_SIZE) {
        const chunkFile = path.join(CHUNKS_DIR, `chunk_${chunkNumber}.${fileType.ext}`);
        fs.writeFileSync(chunkFile, currentChunk.slice(0, CHUNK_SIZE));
        chunkFiles.push(chunkFile);
        
        currentChunk = currentChunk.slice(CHUNK_SIZE);
        chunkNumber++;
        progressBar.update(chunkNumber);
      }
    });

    readStream.on("end", () => {
      if (currentChunk.length > 0) {
        const chunkFile = path.join(CHUNKS_DIR, `chunk_${chunkNumber}.${fileType.ext}`);
        fs.writeFileSync(chunkFile, currentChunk);
        chunkFiles.push(chunkFile);
        progressBar.update(chunks);
      }
      progressBar.stop();
      resolve(chunkFiles);
    });

    readStream.on("error", reject);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞
async function transcribeChunk(filePath, progressBar) {
  try {
    const response = await openai.audio.transcriptions.create({
      file: fs.createReadStream(filePath),
      model: "whisper-1",
      response_format: "text"
    });
    return response;
  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ ${filePath}:`, error);
    return "";
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function processAudioFile(inputFile, options) {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI API
    const apiKey = options.apiKey || process.env.OPENAI_API_KEY;
    if (!apiKey) {
      throw new Error("API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é --api-key –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY");
    }

    openai = new OpenAI({ apiKey });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    const normalizedPath = inputFile.replace(/\\ /g, ' '); // –ó–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    const absoluteInputPath = path.resolve(normalizedPath);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if (!fs.existsSync(absoluteInputPath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${absoluteInputPath}\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ –∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
    }

    createDirectories();
    
    console.log(`\nüìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${absoluteInputPath}`);
    
    // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏
    const chunkFiles = await splitFileIntoChunks(absoluteInputPath);
    
    // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤
    console.log("\nüéØ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤...");
    const progressBar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);
    progressBar.start(chunkFiles.length, 0);
    
    const transcriptions = [];
    for (let i = 0; i < chunkFiles.length; i++) {
      const transcription = await transcribeChunk(chunkFiles[i], progressBar);
      if (transcription && transcription.trim()) {
        transcriptions.push(transcription);
      }
      progressBar.update(i + 1);
    }
    progressBar.stop();

    if (transcriptions.length === 0) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç.");
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
    const resultFile = path.join(RESULTS_DIR, `transcript_${timestamp}.txt`);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
    const fullText = transcriptions.join("\n\n");
    fs.writeFileSync(resultFile, fullText, "utf8");

    // –û—á–∏—Å—Ç–∫–∞ —á–∞–Ω–∫–æ–≤
    chunkFiles.forEach(file => fs.unlinkSync(file));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    const absoluteResultPath = path.resolve(resultFile);
    
    console.log(`\n‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`üìù –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${(fullText.length / 1024).toFixed(2)} KB`);
    console.log(`\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤:`);
    console.log(`file://${absoluteResultPath}`);
  } catch (error) {
    console.error("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CLI
program
  .name('whisper')
  .description('–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é OpenAI Whisper API')
  .version('1.0.0')
  .argument("<inputFile>", '–ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã, –∑–∞–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –∫–∞–≤—ã—á–∫–∏: whisper "my audio file.mp3")')
  .option('-k, --api-key <key>', 'OpenAI API –∫–ª—é—á (—Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ)')
  .addHelpText('after', `
–ü—Ä–∏–º–µ—Ä—ã:
  $ whisper audio.mp3                              # –ü—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
  $ whisper "my audio file.mp3"                    # –§–∞–π–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –∏–º–µ–Ω–∏
  $ whisper audio.mp3 --api-key your_api_key       # –° —É–∫–∞–∑–∞–Ω–∏–µ–º API –∫–ª—é—á–∞
  $ whisper audio.mp3 -k your_api_key              # –¢–æ –∂–µ —Å–∞–º–æ–µ, –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–æ—Ä–º–∞
  `)
  .action(processAudioFile);

program.parse(process.argv);
